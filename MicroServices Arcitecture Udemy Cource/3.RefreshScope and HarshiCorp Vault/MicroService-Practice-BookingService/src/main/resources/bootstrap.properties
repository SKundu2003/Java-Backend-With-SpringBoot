# In this file we will specify in which port and url our "Configuration-Server" is running

spring.cloud.config.uri=http://localhost:8888/



#spring.datasource.url=jdbc:mariadb://localhost:3306/bookingDB --> this is also added in Central-Configuration
##Here we are saying which of the default profile of we want to access --> in our case Central-Configuration file has "product-dev.properties"
##So we have to use "http://localhost:8888/MicroService-Practice-BookingService-Application/dev" this link so --> dev profile we are using --> to do that -->
spring.cloud.config.profile=dev

#spring.datasource.username=souvik
#spring.datasource.password=souvik2003   --> Now we will store the username and password in KeyVault using A JSON file

#We don't need that any more because this properties are stored in "Central-Configuration" file
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true



#server.port=8080 // don't use it rather-than
#Billow property will make sure to allow available port dynamically on the run time, if booking service has multiple Instances
server.port=0

#every application need to register in eureka server with a name that's why we need to give every service a name
spring.application.name=MicroService-Practice-BookingService-Application

#Billow property will generate a random name for each instance of "booking-service" and then register it to Discovery Server
eureka.instance.instance-id= = ${spring.application.name}:${random.uuid}

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


#Configuration for Vault connection
spring.cloud.vault.host=localhost
spring.cloud.vault.port=8200
spring.cloud.vault.scheme=http
spring.cloud.vault.authentication=token
spring.cloud.vault.token=00000000-0000-0000-0000-000000000000

